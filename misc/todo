[x] Implement a simple OpenGL backend renderer API
	[x] draw primitives
		[x] draw lines so we can make an origin &| grid
		[x] draw triangles
	[x] manipulate the VIEW matrix
	[x] load textures (CPU => GPU)
	[x] draw textured triangles
	[x] allow some kind of `model` transform
[x] Implement a simple general-purpose allocator
[x] use general-purpose allocator for texture loading instead of raw 
	transient storage pointer inside of game
[x] figure out why the game shuts down sometimes when hot-reloading game code
[x] actually test kgaRealloc
[x] override assert & memory allocators for stb_image
[x] logging system 
	[x] circular buffer with maximum begin/end log lengths
	[x] selectable logging levels (info, error, warning)
	[x] automatically print file+line#
	[x] automatically print function name
	[x] automatically print a timestamp
	[x] write log to disk platform function
		[x] automatically write the log when the program exits gracefully
			https://www.gingerbill.org/article/2015/08/19/defer-in-cpp/
	[x] complete logging tech debt
		[x] fill in all the logging TODOs
		[x] remove ALL OutputDebugString calls and similar calls, replace w/ 
			logging calls
			[x] Allow game code to call platform log function.
[x] Logging system: perhaps fix the size of the log line meta tag to increase 
	readability, since source file name sizes tend to vary greatly
[x] Figure out why log file doesn't get output when running outside the 
	debugger...
	[x] remove LITERALLY all OutputDebugString calls for real this time??...
[x] detect when the program crashes 
	https://stackoverflow.com/q/19656946
	https://stackoverflow.com/q/28629351
	[x] write log file
	[x] write minidump file
[x] detect & properly handle stack overflows
	[x] reserve extra stack space for this case
		https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadstackguarantee?redirectedfrom=MSDN
[x] Obtain AppData folder specific to this application
[x] Obtain TempData folder specific to this application
[x] Write dump files to a global unified temp directory
[x] Write log files to temp directory instead of the application's exe directory
[x] Write game_temp dll file to temp directory instead of the application's exe 
	directory
[x] separate game code out of kml, and setup a different repo for a test game
[x] For the love of god remove assertions from logging code to prevent infinite 
	exceptions from firing...  Either that or make a better assert macro.
[x] Integrate IMGUI into the platform layer.
	[x] Hook IMGUI into the general-purpose allocator for transient storage.
		See IMGUI_DISABLE_DEFAULT_ALLOCATORS in `imconfig.h`
	[x] Figure out why ImGui isn't getting keyboard events :| :| :|
[x] Don't rebuild platform layer if none of the files have changed.
	Compare diff trees in batch? 
		https://www.dostips.com/forum/viewtopic.php?t=6223
[x] Copy the necessary .pdb files along side the mini dumps (if available) to
	minimize the chance of accidentally recompiling the pdbs!
	[x] copy win32-main.pdb
	[x] copy the latest version of game*.pdb
	[x] copy the actual application executable as well!!!
[x] perform the code tree diff in the build batch file separately for KML and 
	%project_dir%? (so that game projects can skip KML rebuilds and their own 
	code using separate conditions)
[x] Figure out why ImGui demo widget randomly crashes.  It seemed to crash
	when I had all the demo widgets open and then opened the console 
	example.
	[x] Is it my allocator that's broken???? (yes, yes it was)
		[x] track the total # of allocations in the KGeneralAllocator
			[x] verify double linked-list integrity in SLOW_BUILD mode
		[~] track the size of the largest unallocated chunk, if it exists...
		[~] WRITE UNIT TESTSSSSSSSSSS :(
		What other things can I verify??...
	[-] Does it only crash when called from game, or does win32-exe 
		experience the same crash?
[x] Load a WAV sound and play it.
	[x] Load entire WAV file into memory (temporary file memory pool).
		For the purposes of getting things up and running, this can just be 
	[x] Decode the WAV file format into a usable sound data structure.
	[x] Place this `RawSound` data into its final resting memory location 
		(game transient storage)
	[x] Encapsulate the memory location of the `RawSound` asset using an 
		`AssetHandle`
	[x] Create an AudioMixer state
		[x] Initialize with a set # of `TapeDeck`s, which holds a `Tape`
		[x] A `Tape` holds a reference to a RawSound, and how many samples of 
			the sound have been played so far.
	[x] Play a RawSound AssetHandle using the AudioMixer
		[x] Find an unused TapeDeck
		[x] If there is one, initialize the Tape using the AssetHandle to the 
			RawSound
		[x] Each frame in GAME_RENDER_AUDIO, pump the audioBuffer with data from 
			the AudioMixer
[x] Audio - Investigate `Failed to lock buffer! result=0x80070057` warning! :(
[x] Figure out a way to collapse the KLOG macros to relieve some of the 
	implementation burdon of the game module
[x] Audio Platform - decode OGG Vorbis files into RawSound using stb_vorbis
[x] Audio mixer - play+repeat forever
[x] Audio platform - go back to locking the maximum amount of the audio buffer;
	lock the entire range between [writeCursor, playCursor)
	[x] tell the audio mixer to fill as much of the buffer as possible with the 
		current tracks
	[x] calculate the # of consumed audio samples since last frame
	[x] change the track invalidation condition such that audio tracks only 
		become invalid when the audio platform has CONSUMED all of their audio 
		sample blocks (instead of becoming invalid as soon as all sample blocks 
		have been written to the buffer)
[x] Audio platform - fix buffer under-run when the application first starts due 
	to lag, etc...
[x] KAssetManager - load png files
[x] KRB - draw textured quad
[x] KRB: pass the API to the game module in a more graceful way to allow API 
	changes in a single file.
[x] KRB - modify model xform rotation
[x] Win32: Fix v-sync frame timing issues (not properly maintaining the target 
	frame rate)
[x] KRB - refactor API such that `KrbTextureHandle` is no longer required by 
	client code.  
	[-] Perhaps `KAssetManager` maintains a `KrbTextureHandle` alongside the 
		`RawImage`, which gets loaded into the KRB when the asset is added?
	[x] Perhaps `RawImage` just contains a `KrbTextureHandle` which simply gets 
		loaded into the KRB when the image gets loaded from the platform?
[x] Set where assets get loaded from locally at the platform level to remove the 
	need to continuously add "assets/" to the beginning of every asset string.
[x] Set kcpp output files to be read-only to reduce chance of accidentally 
	editing them instead of the original source files.
[x] move all the platform API calls into a PlatformApi struct.
[x] Asset streaming system (setup/prep)
	[x] Is there an easy way to bind asset names to code in an efficient way?
		Hashing asset strings everywhere is slow/cumbersome.
		[x] Maybe a meta-programming solution? 
			[x] How long does it take to read all the files inside of the 
				'/code' folder and write copies of all these files into 
				'/build/code' in the same folder structure???
				Answer: less than a second.
			[x] Or maybe just copy all source files into a temp code folder in 
				the build directory, performing the necessary token transforms 
				during this step.
			[x] Build a static database/manifest of asset strings in an array, 
				which  is included in source files that contain an instance of 
				the special macro.
			[x] Include the asset string manifest in all files that use KASSET 
				macro functionality. (automatically?)
			[~] Maybe sort the array of asset strings alphabetically for easier 
				debugging?
			[-] Output `*.gen.cpp` files for source files which contain replaced 
				asset strings.
			[-] Output `*.gen.cpp` files for source files which include files 
				which have been generated RECURSIVELY.
		[-] Maybe use X-Macro for this? https://stackoverflow.com/a/320888
			Scan thru code and replace a special empty macro with some value.
	[x] `push` request for an asset and receive an asset handle.
		[-] Quickly read file meta data to determine raw data size so we can 
			reserve it for whoever needs to load.
			(image dimensions, sound hz/#channels/bits-per-sample)
			PNG file spec: 
				http://www.libpng.org/pub/png/spec/1.2/PNG-Contents.html
			WAV file spec:
				http://soundfile.sapp.org/doc/WaveFormat/
		[x] push audio assets
		[x] push PNG assets
[x] multi-threaded job queue
	[x] spawn a bunch of threads
	[x] pull test jobs off a queue in a thread-safe manor
	[x] wait for all jobs to complete.
	[x] instead of burning a hole in my CPU, yield the threads to a semaphore 
		until work actually gets posted to the queue
	[x] generalize the queue to process any job
	[x] make log system thread-safe probably!
	https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread
	https://docs.microsoft.com/en-us/windows/win32/sync/semaphore-objects
	https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-releasesemaphore?redirectedfrom=MSDN
	https://docs.microsoft.com/en-us/windows/win32/sync/wait-functions
[x] Asset streaming system (multi-threaded)
	[x] Load default assets when application first starts using Z85 files or 
		something
	[x] Until the asset is loaded into memory, the handle represents a default 
		asset of some kind. 
		(default texture, default mesh, default sound, etc...)
	[x] Submit a job to load pushed KASSET
	[x] make assetDataAllocator thread safe in the appropriate platform loading 
		functions.  (the allocator itself doesn't really have to be threadsafe)
		[x] Use a separate lock for vorbis operations
		[x] Make STBI allocations threadsafe
	[x] Fix KRB bug with glGetError not reporting all errors.
	[x] Fix KRB_BEGIN_FRAME bug where we pop too many matrices.
	[x] Query the platform layer for job completion status using a job handle.  
		This would eliminate the need to perform primitive synchronization 
		outside of the platform layer.
	[x] Free RawImage KRB resources when the asset gets freed
	[x] Query KAM for asset load status.  Use case: we don't want to perform 
		certain logic until all assets finish loading; if we're at a loading 
		screen or w/e.
[x] Hot-reload "active" assets when their date modified has changed.
[x] fix KRB not being correct when window resizes
[x] Win32: Fix mouse not displaying resize cursor
	Use the low-word of lParam of a WM_SETCURSOR message to determine what 
	cursor to use.
	https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-nchittest
[x] fullscreen toggle support 
	https://devblogs.microsoft.com/oldnewthing/20100412-00/?p=14353
[x] Fix keyboard buttonstates incorrect
	[x] differentiate between left/right alt keys
[x] Figure out why there is a beep when I press alt+enter
[x] "clean" build script
[x] "Release" build script
	[x] set appropriate code generation compiler options
	[x] Set win32 application icon.
	[x] Set win32 window icon.
	[x] procedurally set the asset load directory relative to the executable
	[x] automatically "clean" if requested debug/release selection differs from
		previous build's settings
	[x] If hiding the mouse cursor, only hide it if the cursor is inside the 
		client's rectangle; do not hide the mouse if we're in the window border!
[x] Attempt to separate the test "game" code from the rest of the platform 
	layer for the sake of organization.
	[-] kc++: apply code transformations on all included files?
		[-] How do you find where the included file is?
			We probably need the same build environment variable.
		[-] Process the included files.
		[-] Place them into the same directory as the transformed source file.  
			(ONLY if they have transformations applied!)
	[-] Refactor media layer code that contains code transformations so that it 
		no longer does so?
		[-] maybe KASSET macro expands to `assetCstr, kassetIndex`?
		[-] change KAssetManager API 
		[-] change KAudioMixer API
	[x] Just move KAssetManager & KAudioMixer out of the platform layer code &
		into the game layer code?
[x] Update README now that project is restructured, especially `new game 
	project` section.
[x] kc++: only include the generated kasset header ONCE per file!
	[x] Manually put an include macro at the top of files to help maintain line 
		#'s while debugging?
	[-] Automatically detect if we've already injected the include statement &
		ignore subsequent injections?
[x] KAU: change tape volume
[x] Flipbook sprites
	[x] Flipbook metadata KASSET
		[x] frame dimensions
		[x] frame count
		[x] texture asset file name
			[-] Is there a way to pre-compile this like KASSET filename strings?
			[x] Maybe we can just do a single pass over the g_kassets to convert 
				the asset filename into a KAssetCStr
		[x] default repeat?
		[x] default reverse?
		[x] default playback speed
	[x] Don't store the texture asset file name in FlipbookMetaData.  Instead, 
		store a KAssetCStr.  
	[x] Store a textureAssetFileName buffer inside KAsset in the KAM and pass a 
		reference to it to the platform.
	[x] default FlipbookMetaData KAsset
	[x] save the KAssetCStr into FlipbookMetaData KAsset
	[x] Add anchor ratio to flipbook meta data so we can correctly rotate the 
		flipbook's quad mesh.
	[x] Flipbook instance
		[x] repeat?
		[x] reverse?
		[x] playback speed
	[x] Draw Flipbook using KRB draw textured quad.
	[x] pass deltaSeconds to GAME_UPDATE_AND_DRAW
	[x] Update Flipbook based on deltaSeconds.
	[-] Create some sort of Flipbook manager construct which manages Flipbook 
		instances (using a handle/ticket system)???
		[-] Step all the Flipbook instances in the update function.
		[-] automatically change non-default Flipbook properties if the Flipbook 
			asset's values change (is this even necessary?)
	[x] hot-reload flipbook meta data assets
[x] Decide on whether or not I want this project to be `KML` or `KPL` or `KMPL` 
	or something else entirely?..
	[x] replace all appropriate strings in the project to the one I choose.
[x] generalAllocator => KGeneralAllocator
[x] KRB: draw circle
[x] Rebuild the game code if the KML code tree is changed, since game code 
	includes KML code and depends on it.
[x] kc++: Attempt to modify the input souce code IN-PLACE so when the compiler 
	builds the application, the debug files will point us back to the original 
	files instead of the read-only kc++ output code.
	[x] Rename the input source code directory (temporarily)
	[x] On top of outputing modified read-only source into a build directory, 
		also output regular files to the original source code directory's name.
	[x] In KML's build script: erase the modified code directory.
	[x] In KML's build script: rename the copied source directory back to the 
		original name
[x] Restructure GamePad similar to GameKeyboard to allow buttons to be iterated 
	over a loop.
[x] KPL: `isApplicationFocused` functionality
	[x] Don't quit application when ESC is pressed outside app focus!
[x] Log: output milliseconds in timestamp
[x] kc++: do not inject the include for gen_assets.h with a ".." directory 
	operator!
	[x] do not ignore this warning anymore in build script
[x] Figure out if there's a good way to include files from KML which need to be 
	processed by kc++ so that I don't have duplicate code in KML & individual 
	game folders.
	[-] Option 1: dynamic recursive source inclusion
		[-] Extract include directories from the %INCLUDE% environment variable
			http://www.cplusplus.com/reference/cstdlib/getenv/
		[-] For each "include" directive found while processing our input code:
			[-] Find the file using the %INCLUDE% directories 
			[-] assert/fail if file isn't found
			[-] check if the folder containing this file is already contained by 
				another added folder
			[-] check if the folder contains other folders that were previously 
				added
		[-] for each code folder that was added due to "include" directives:
			[-] rename the folder temporarily
			[-] create a folder with the same name and fill it with kcpp code!
		[-] Problem: how does the build script know that this folder exists so 
			that we can delete the kcpp folders and rename the stashed code 
			folders?
	[-] Option 2: special %KCPP_INCLUDE% environment variable
		[-] extract all code directories from %KCPP_INCLUDE% 
		[-] for each directory extracted:
			[-] rename the folder temporarily
			[-] create a folder with the same name and run kcpp on the original 
				code
		[-] back in batch script, we can now restore the externally processed 
			kcpp code by extracting the directories from %KCPP_INCLUDE%
			https://stackoverflow.com/a/36432837
	[x] Option 3: just run kc++ on all the %KCPP_INCLUDE% directories!
		[x] extract all code directories from %KCPP_INCLUDE% in batch
		[x] run kc++ on all %KCPP_INCLUDE% code directories
		[x] delete the kcpp code and rename the backup code folders for all the 
			%KCPP_INCLUDE% directories
[x] KAM: Fix asset->assetFileName memory becoming undefined after reloading game 
	code, which sometimes causes a crash on game code reload.
[x] KFB: fix kfb->metaData.textureKAssetCStr memory becoming undefined after 
	reloading code, which sometimes causes a crash on game code reload.
[x] win32: display a notification (window title bar? IMGUI?) when the game code 
	is in the process of reloading, because it takes a while before CL.exe 
	relinquishes control of the binary.
[x] instead of deleting the kcpp code at the end of a build, how about we just 
	rename it to `*_kcpp` and delete these folders at the beginning of a new 
	build???
	[x] ignore these `*_kcpp` folders in git
[x] KFB+KRB: draw with vertex colors
[x] build: compare file write timestamps using SECONDS so that I can perform 
	more than one fucking build per minute
[x] figure out why the debugger can't seem to load symbols for structs (both 
	vscode & vs have this issue)
	[x] attempt to compile manually using the *_kcpp folders to see if that 
		might be the issue.
		Results: yes, this does seem to fix the issue, but tells the debugger to 
			open the kcpp source in the editor which is not what I want ☹
	[x] attempt to clone the original file's timestamps in the kcpp code files
		(probably only lastWriteTime is necessary, but try all timestamps just 
		in case)
		https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfiletime
		https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-setfiletime
		Results: YEP, that was the issue.  🙃
		Actually NO, that was NOT the issue.  PDB files store a cryptographic 
		hash checksum of the source files!  😭 Source:
		https://docs.microsoft.com/en-us/cpp/build/reference/zh?view=vs-2019
	[x] remove kc++ from entire project build pipeline
	[x] build: remove kcpp source code shuffling nonsense
	[x] just supply an asset manifest from the game!
		[x] build a tool to automatically generate an asset manifest in the form 
			of a C++ header file
	[-] figure out how to refer to specific assets in the asset manifest in code
		[-] just hash to cstrings?
		[-] scan the asset manifest and generate c++ code that contains variable 
			names for each asset, and refer to these generated names in code?
		[-] x-macros? https://stackoverflow.com/a/320888
	[x] remove `code-kcpp-utilities`
		[x] move the code back into the code folder
		[x] remove code-kcpp-utilities from build environment
	[-] kasset: if gen_kassets.h already exists, perform a cryptographic hash on 
		the contents and compare them with the cryptographic hash of the 
		file we just generated.  If they match, don't write the file!
		http://people.csail.mit.edu/rivest/Md5.c
	[x] kasset: filter out assets based on `assets.ignore` file patterns
		http://www.cplusplus.com/reference/regex/regex_match/
[x] build: use crypto hashes instead of timestamps to see if files have changed
	https://stackoverflow.com/a/41188026
[-] kc++: refactor macros to have names that actually make sense; current API is 
	pretty confusing/garbage.
[-] kc++: create a new macro in place of `&KASSET_CSTR` because this syntax 
	makes intellisense shit the bed
[-] kc++: release build
[x] linear allocator 
[x] build: set /Fd output for cl to prevent the VCx0.pdb files from overwriting 
	each other!
[x] KRB: convert world-space vectors to screen-space
	https://stackoverflow.com/a/8493759
[x] win32: copy VC_*.pdb files to the minidump file output location
[x] KAM: when `kamGetRawSound` gets called and the asset is UNUSED, attempt to 
	load the asset by calling `kamPushAsset` (see `kamGetTexture`)
[ ] win32: DirectInput 
	https://bell0bytes.eu/directinput/
	https://docs.microsoft.com/en-us/windows/win32/xinput/xinput-and-directinput#xinput-and-directinput-side-by-side
	[x] ignore Xinput devices, because Xinput gives more functionality
	[x] poll Dinput devices
	[x] re-enumerate Dinput devices when DBT_DEVNODES_CHANGED event occurs!
	[~] Logitech F310 support
		[x] translate the DirectInput buttons as closely as possible to the 
			GamePad structure
		[~] report as an Xinput device so the game knows what the buttons should 
			look like.
	[x] poll xinput along with dinput controllers
	[x] create internal KML API to facilitate the creation of button maps for 
		DirectInput controllers
		[x] poll for the index of a button that is being held down
		[x] poll for the index of an axis that is being "held down"
		[x] poll for the controller's product GUID
		[x] poll for the controller's product name
	[x] change GamePad to support L2/R2 buttons for all controllers
		[x] XInput controllers just register these as being pressed if the 
			triggers are pressed to a certain threshold
	[x] change the way DInput controllers are polled to use controller map 
		configurations generated by some external tool instead of being 
		hard-coded
	[x] fix DirectInput deadzone
	[ ] reimplement force feedback for Xinput controllers
	[ ] PS4 controller support
		https://gist.github.com/ocornut/d2d82bbb224c071d7d085e336cc92e37
		UHHhhh, so PS4 controller isn't even DirectInput8 compatible... so all 
		this was for nothing (for now...)
		NO, actually it is being detected just fine !!!  Most likely the issue 
		is that DInput is reporting several axes/buttons active when idle or 
		something.
		[ ] figure out how to solve the issue of PS4 reporting activity when 
			nothing is being pressed
[~] win32: RawInput support
	https://docs.microsoft.com/en-us/windows/win32/inputdev/about-raw-input
	https://www.codeproject.com/Articles/185522/Using-the-Raw-Input-API-to-Process-Joystick-Input
	https://chromium.googlesource.com/experimental/chromium/src/+/refs/wip/bajones/webvr/device/gamepad/raw_input_data_fetcher_win.cc
	I'm currently marking these checklist items as `~` because I believe it 
		might actually be possible to support PS4 controllers via DirectInput 
		after all, and the reason why it wasn't working before is because I'm an 
		idiot as usual.
	[~] poll OS for RawInput devices and expose this to the game code for 
		testing purposes
		[x] obtain product GUID
			https://www.codeguru.com/cpp/misc/misc/keyboard/article.php/c15957/Raw-Input-Device-informations.htm
			I can just use PID/VID for product GUID
		[x] obtain product name string
			https://stackoverflow.com/q/12656236
		[~] obtain an instance GUID
			[~] method 1: compute a hash of the RawInput device name
			[~] method 2: store persistent state of the device in an object 
				somewhere, and use that memory address as the instance ID
				- this would mess up if we unplugged a controller and another 
					controller takes its place in memory
		[~] ignore XInput controllers (just scan device name for "IG_")
		[~] accumulate a list of RawInput game controllers like with DirectInput
	[~] PS4 controller support
		[~] force feedback & lightbar control
			https://stackoverflow.com/a/27437973
	[~] REMOVE DirectInput from the code base??? according to this source, 
		RawInput does everything DirectInput does & more.  Is this ACTUALLY 
		true?
		https://www.codeproject.com/Articles/185522/Using-the-Raw-Input-API-to-Process-Joystick-Input
[x] pull kmath out of global-defines
	[x] separate Quaternion from the rest of kmath API
[x] remove the requirement to undefine & redefine KLOG macro in game module
[x] change `kassert` to be platform-specific code
[x] KML-platform: support running a "server" program on a separate thread
	[x] jobQueue: support persistent jobs; don't require jobs to have been 
		finished by the time a new job needs to be posted in that slot
		[x] test to make sure this works by running a server thread while 
			hot-reloading assets
	[x] is it possible for game code to be reloaded while server is running?
		- this will cause the server's job thread function to become invalid
		- server job thread needs to be suspended while code is reloading
		- during reload (while job threads are suspended) the game code needs to 
			tell the platform the new address of the server's thread function
		- actually, ALL job threads need to be completed with their jobs before 
			the code gets unloaded.  Server job needs to be shut down; game code 
			needs an interface API which gets called when game code is about to 
			be reloaded!
		- once code is reloaded, job threads can resume & a new Server job is 
			submitted without re-initializing the Server's state
	[-] game code hot reload: freeze all job threads while reloading code
		https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-suspendthread
	[x] game code hot reload: pre-unload API
	[x] re-submit Server job to platform when the game code is reloaded
	[x] kpl: get current time API
	[x] kpl: sleep thread API
[x] KML-platform: UDP networking API
	[x] initialize winsock
	[x] open/close socket API
		- allow only a maximum # of sockets (maybe like 32-ish?)
	[x] make socket API thread-safe
	[x] connect socket to host via hostname
		https://stackoverflow.com/a/2152093
		https://docs.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo
	[x] establish API for storing platform network addresses in the game code
		[x] method 0: just define a type NetAddress which is just an array 
			of bytes whose size is >= platform-specific address type 
		[-] method 1: add Platform API which allows game modules to allocate 
			an address and receive a handle to it
	[x] push data to socket without blocking
	[x] poll data from socket without blocking
		https://stackoverflow.com/a/15941974
		https://www.winsocketdotnetworkprogramming.com/winsock2programming/winsock2advancediomethod5a.html
		https://www.mkssoftware.com/docs/man3/select.3.asp
[x] win32: add locks during asset loading/decoding functions because KGA is not 
	thread-safe!  Crashes can be produced by constantly calling 
	`kamUnloadAllAssets` every frame.
	- looks like I did this earlier, but for some reason I forgot to add locks 
		to the Z85 decoding routines
[x] figure out why client socket becomes invalid when game code is reloaded
	- Issue: GAME_ON_PRE_UNLOAD is firing multiple times during reload
[x] kutil: build host->net byte reordering API so we can safely transfer data 
	types which are larger than 1 byte
	https://developer.ibm.com/articles/au-endianc/
[x] implement memory allocator context configuration in stb_ds.h
	[x] move unit tests into implementation section
	[x] dynamic array impl
		[x] method 0: constructor initialization
		[-] method 1: template-sensitive initialization
			I might want to prefer this method after messing around w/ the 
			hashmap API
	[x] hash map impl
	[x] string arena impl
	[x] fix malformed unit test code
[x] fix stbds_arrinit not being extern delcared in declaration source
[x] define function signiture macros using more optimal whitespace for better 
	asthetic/readability
[x] establish usage code for transfering "packets" between client/server
	[x] establish a virtual network connection
		[x] connection request + handshake
		[x] auto disconnect after some threshold of time since last packet
		[x] connection disconnect + handshake
	[x] send server client state every frame
		- position & orientation
	[x] interpret client state data on the server
	[x] send client server state every frame
		- list of clients
			- position & orientation
	[x] interpret server state data on the clients
	[x] pull UDP virtual connection code out of client/server as its own utility 
		(kNetClient & kNetServer)
	[x] add net(Un)Pack API for 8-bit variables for convenience/asthetic 
	[x] update netPack API to return # of bytes packed
	[x] pull sample-game-specific netcode into it's own module (exampleGameNet)
	[x] remove ServerState::pemanent/transientMemory storage since it's 
		completely unnecessary
	[x] clear client actors when we disconnect from server
	[x] serverReadClient: move code that spawns a possessed client actor into 
		another function (such as when a client connection is confirmed)
		[x] also, make sure the possessed actor is "deleted" on the server when 
			the client disconnects
	[x] gameWriteClientState: send input instead of actor data
	[x] discard old/duplicate packets using a rolling packet index
	[x] calculate round-trip-time using platform timestamps
		[~] send this data to each client via the client list
			- I'm just sending the pings back to individual clients for now 
				because I don't really care about accumulating a list of server 
				clients on each individual client
	[x] reliable data transfer protocol
		[x] client => server
			[x] send text message reliably to server
			[x] test by purposely dropping the reliable data a few times
		[x] send client inputs as reliable data
			- at this point, the only unreliable client=>server data should just 
				be connection telemetry
		[x] server => client
			[x] attempt to pull reliable data buffer logic out of KNetClient so 
				that we can reuse it on each server-side client
			[x] broadcast reliable text messages to all clients
	[-] optimize: serverWriteState: only send net-relevant actors
	[x] ensure game code hot-reload maintains network virtual connections
	[x] change kutil::netUnpack API to return the value in an overloaded 
		parameter, and return the # of bytes unpacked.  This is better because 
		back in the user code, we can accumulate the # of bytes unpacked and 
		assert that the derived value matches some known value!
	[x] consider changing kutil net (un)packing API to take a buffer end pointer 
		instead of the buffer + buffer size
[x] do not assert that errno == 0 in win32-directinput
[x] win32: allow multiple instances of the program to be run on the same 
	computer so that it is possible to debug client prediction on one machine
	[x] generate a unique `fullPathToGameDllTemp` each time the program is run 
		[x] iterate over the files in the `g_pathTemp` and count the # of 
			*_temp*.dll files in this directory
		[x] for each # between 0-#TempDLLs, iterate over the files in 
			`g_pathTemp` and see if there is a temp dll with that # appended to 
			the filename
		[x] choose a temp dll filename with an unused postfix #
	[x] erase the temp DLL when the program exits probably?
		Na.. just attempt to erase all DLL files in the temp directory when a 
		KML executable begins
[ ] investigate crash on sehar's computer when DInput controller is plugged in
[x] create a `samples` folder with individual game projects demonstrating 
	specific KML workflows/features
	[x] MINIMAL TEMPLATE, for easier creation of game projects
	[x] drawing primitives
	[x] keyboard input
	[x] dynamic memory management
	[x] drawing texture assets
	[x] drawing flipbook animations
		[x] allow the game module to load raw files and decode them itself, 
			since not all files are complicated enough to warrant 
			platform-dependant implementations (such as FlipbookMetaData)
			[x] move FlipbookMetaData out of platform-game-interface
			[x] add 'load entire file' API
			[x] add thread locking API to KPL because the game's job threads 
				need async access to the asset memory allocation
			[x] pull win32 platform API implementation out of win32-main
	[x] gamepad input
	[x] playing music & sound assets
	[x] client/server
		[x] KNetClient: configurable server port
[x] KAM: fix DIABOLICAL bug where I accidentally request the raw file allocator 
	be initialized in unallocated memory!!!
[x] KFB: fix bug in kfbDecodeMeta where we read past the end of the file and 
	crash sometimes
[x] KFB: if the `texture-asset-file-name` is not present, assume that the 
	texture asset is in the same directory with the same name only with a `.png` 
	file extension
[x] network: change sockets to non-blocking by enabling FIONBIO, then we can 
	just get rid of the whole socket selection within a certain period of time 
	nonsense
	https://www.codersblock.org/blog/multiplayer-fps-part-3
	https://docs.microsoft.com/en-us/windows/win32/winsock/winsock-ioctls
[x] stb_ds: simplify arrinit to be a macro which just takes 
	(type,memory_context) for significantly less verbose user code
[x] combine all win32 virtualalloc calls into a single memory allocation
[x] win32: pull KML platform interface out of win32-main
[ ] samples: mouse input
	[x] absolute cursor position (window-space)
	[x] buttons
	[x] KRB: screen=>world
		[x] convert mouse coordinates to a world-space ray (position + 
			direction)
			https://antongerdelan.net/opengl/raycasting.html
			https://community.khronos.org/t/mouse-picking-with-opengl/76055
	[x] ray-plane intersection test on the XY plane
		https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-plane-and-ray-disk-intersection
	[x] draw an X on the XY-plane location where the ray intersects
	[x] place geometry in 3D space based on mouse position + click
	[x] middle click to swap between (orthographic | perspective) projections
	[ ] set cursor hidden state
		- right click to hide mouse
		- release right button to reveal & return to last un-hidden position
	[ ] set mouse capture state?
		- capture mouse when it is hidden
	[ ] relative mouse position (using DirectInput?)
		- move the camera around when mouse is captured & hidden
	[ ] relative wheel position
		- scroll to change click circle radius
[ ] samples: 3D collision detection & resolution capabilities
	[ ] utility: Aabb3d broadphase collision detection
	[ ] utility: dynamic bounding volume tree
	[ ] utility: Gilbert-Johnson-Keerthi (GJK) collision detection
		https://www.youtube.com/watch?v=Qupqu1xe7Io
		https://en.wikipedia.org/wiki/Gilbert%E2%80%93Johnson%E2%80%93Keerthi_distance_algorithm
	[ ] utility: Expanding Polytope Algorithm (EPA)
		https://youtu.be/6rgiPrzqt9w
		http://www.dtecta.com/papers/gdc2001depth.pdf
		http://www.dyn4j.org/2010/05/epa-expanding-polytope-algorithm/
	[ ] create arbitrary convex shapes
		[ ] utility: NewtonAppleWrapper
			http://www.newtonapples.net/NewtonAppleWrapper.html
		[ ] utility: QuickHull
			http://algolist.ru/maths/geom/convhull/qhull3d.php
		[ ] or maybe just use someone's QuickHull code?
			https://github.com/karimnaaji/3d-quickhull
[ ] samples: networking: run kNetClientConnect on a separate thread to prevent 
	the game from chunking when the address can't be resolved
[ ] samples: voxel manipulation
	[ ] utility: dual contouring 
		https://www.boristhebrave.com/2018/04/15/dual-contouring-tutorial/
	[ ] utility: heirarchical approximate convex decomposition
		http://khaledmammou.com/hacd.html
[ ] samples: render TTF
	[ ] integrate stb_truetype
	[ ] utility: font cache dynamic asset
[ ] kassert: generate a memory dump & a dialog box with the option to continue 
	execution
[ ] Add a simple gameplay RNG utility with small well-defined state, like maybe 
	Wichmann–Hill for the memes since it was apparently used in Windwaker.
	https://en.wikipedia.org/wiki/List_of_random_number_generators
[ ] kcpp: bring back kcpp and repurpose it 
	[ ] scan for a macro to generate reflection code on data declarations
		[ ] generate string arrays for enumerations
[ ] Allow the game's build command to pass it's own .rc file to replace the one 
	provided by default from KML to allow the game to customize the application 
	icon
	[ ] Add a `Deployment Procedures` section to README to document this process
[ ] create a script which attempts to build all the KML samples and reports if 
	any of them fail to build
[ ] DInput: move device enumeration into a separate thread so the main thread 
	doesn't hang every time a device is hot-swapped
[ ] DInput: force feedback
[ ] it sure would be nice to be able to have an easy way of visualizing memory 
	allocations for debugging... 🙃
	[ ] save the file + line# of each dynamic allocation
	[ ] dump the contents of memory allocators into a text format
	[ ] create a KML program which reads a memory allocation dump and displays 
		it graphically
[ ] vscode: set defines in c_cpp_properties.json using environment variables so 
	that they can be set per project dynamically
[ ] refactor handle collections to interpret the handle value == `0` to mean the 
	handle is invalid, eliminating the need to define an `INVALID_HANDLE` value 
	[ ] KAssetHandle
	[ ] INVALID_PLATFORM_AXIS_INDEX
[ ] Pay TODO debt.
[ ] KAU: master volume control, default to like ~80% or something...
[x] build: rebuild KML & game if the build scripts are changed
[ ] build: ensure all necessary environment variables are set
	https://stackoverflow.com/a/37073832
[ ] build: check for errors output from preprocessing pipelines 
	(kasset, kcpp, etc...)
[ ] build: cleanup using windows batch functions (if possible)
[ ] vscode: create my own extension 
	https://code.visualstudio.com/api/get-started/your-first-extension
	[ ] automatically place a semicolon at the end of a line
		[ ] work correctly with multiple cursors
	[ ] automatically place a semicolon at the end of a struct/enum/class 
		definition
[x] Do not poll async keyboard state if the window is not currently active 
	(optionally?)
[x] KRB: send vertex colors to draw functions.
	[x] Maybe generalize KRB functions to take a pre-defined `Vertex` struct?..
	[x] allow API to take vertex properties using STRIDE?
[x] KRB-opengl: Figure out why GL_UNSIGNED_INT_8_8_8_8 is undefined
	https://community.khronos.org/t/gl-unsigned-int-8-8-8-8-is-undefined/65686
[ ] display debug frame metrics
	[ ] Can I just use Optick?..  I really liked Optick..
	[ ] allow the game code to probe the platform for cycle counts for timing.
	[ ] Investigate big ~10-frame lag spike that seems to happen every time the 
		application runs for ~30seconds after startup...
[~] pause audio output when window goes out of focus probably.
	- this is already being done in DirectSound right now
[ ] Make asset streaming implementation more robust
	[ ] When attempting to load an asset and we're unable to allocate memory for 
		it...
		[ ] Ask platform to give us a new memory pool.
		[ ] If we are at maximum # of memory pools allowable, calculate the 
			oldest/least-used asset(s) and free them until we are able to 
			allocate successfully!
	[ ] Detect the condition where the allocator has enough space but is too 
		fragmented to place the asset.
		[ ] Attempt to de-fragment the asset memory pool.
		[ ] Release memory pools if they are emptied.
	[ ] We can eliminate the need for a platform-side lock on asset allocation 
		calls (or even allocation for that matter) by doing the thing where I 
		quickly read file data that tells me how big the raw asset is going to 
		be then returning immediately, allocating space for the data, then 
		asynchronously loading the rest of the file & decoding it into the 
		pre-allocated space.
[-] collision engine
	I should just do this on another repository, since this seems outside the 
	scope of a platform layer...
	https://www10.cs.fau.de/publications/theses/2010/Suenkel_BT_2010.pdf
[~] Disable asserts when `g_hasReceivedException` has been flagged, or else the 
	log file will never get written if an assert fires during the exception 
	handler!
	// I already have done this kinda in an earlier commit?..
[ ] turn on floating point exceptions
	https://docs.microsoft.com/en-us/windows/win32/debug/floating-point-exceptions
[ ] replace all ascii API calls with ambiguous char-width macros, and all CHAR 
	buffers with TCHARs to allow more flexibility & unicode support!!!  
	It's 2020.  We have infinite RAM.  Not supporting unicode is UNACCEPTABLE.
[ ] Compile KML with an abbreviated commit hash so that we can append this to 
	the mini dumps so we have a better idea of what codebase the crash happened 
	in, which will give more accurate source files.
	`git log -1 --pretty=format:%h`
[ ] Figure out if there is a good way to detect if an application was force-quit
	by the user, like in situations such as an infinite loop, or the application
	just generally taking too long to do something.
[ ] separate code-utilities into two types: kpl-dll-shared & dll-only 
	- the only platform-shared utility seems to be KGeneralAllocator right now
[ ] relieve the strict requirement to recompile the KML DLL if KML ever needs to 
	be recompiled; the DLL should only need to be recompiled if the following 
	sources change:
		- krb-interface.h             (move to code-utilities/kpl-dll-shared ?)
		- kutil.h/cpp                 (move to code-utilities/kpl-dll-shared ?)
		- platform-game-interfaces.h  (move to code-utilities/kpl-dll-shared ?)
		- kmath.h/cpp                 (move to code-utilities/kpl-dll-shared ?)
		- ImGui
		- stb_ds.h
		- ~any code utilities~
		- ~any KML DLL code~
[ ] Automatically delete older minidumps once enough accumulate.
[ ] Give log files rolling file names like minidumps.
[ ] Automatically delete older log files once enough accumulate.
[ ] Platform audio: pause playback when window moving around.
[ ] Platform Audio - clean up the sound buffer when the program ends so there is
	no click artifact (if possible).
[ ] Audio Mixer - optimize `kauMix`
[ ] Move `KAsset.assetData.flipbook.textureAssetFileName` out of KAsset to keep 
	the size of KAsset as small as possible!
[ ] Detect how many worker threads to spawn based on how many logical cores are 
	available on the system.
[ ] Win32-KRB-opengl: Investigate the need to create a "proper context"
	https://www.khronos.org/opengl/wiki/Creating_an_OpenGL_Context_(WGL)#Proper_Context_Creation
[ ] Print GetLastError messages in human-readable format using FormatMessage
	https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-
[ ] Job Queue - synchronize without locks (HERE BE DRAGONS I guess or something)
	https://docs.microsoft.com/en-us/windows/win32/dxtecharts/lockless-programming?redirectedfrom=MSDN#xbox-360-performance
	https://docs.microsoft.com/en-us/cpp/standard-library/atomic-functions?view=vs-2019#atomic_thread_fence
	https://docs.microsoft.com/en-us/windows/win32/api/winnt/nf-winnt-interlockedcompareexchange
[ ] investigate using `gedit` to test for hidden memory errors
	https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/gflags