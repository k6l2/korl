[x] Implement a simple OpenGL backend renderer API
	[x] draw primitives
		[x] draw lines so we can make an origin &| grid
		[x] draw triangles
	[x] manipulate the VIEW matrix
	[x] load textures (CPU => GPU)
	[x] draw textured triangles
	[x] allow some kind of `model` transform
[x] Implement a simple general-purpose allocator
[x] use general-purpose allocator for texture loading instead of raw 
	transient storage pointer inside of game
[x] figure out why the game shuts down sometimes when hot-reloading game code
[x] actually test kgaRealloc
[x] override assert & memory allocators for stb_image
[x] logging system 
	[x] circular buffer with maximum begin/end log lengths
	[x] selectable logging levels (info, error, warning)
	[x] automatically print file+line#
	[x] automatically print function name
	[x] automatically print a timestamp
	[x] write log to disk platform function
		[x] automatically write the log when the program exits gracefully
			https://www.gingerbill.org/article/2015/08/19/defer-in-cpp/
	[x] complete logging tech debt
		[x] fill in all the logging TODOs
		[x] remove ALL OutputDebugString calls and similar calls, replace w/ 
			logging calls
			[x] Allow game code to call platform log function.
[x] Logging system: perhaps fix the size of the log line meta tag to increase 
	readability, since source file name sizes tend to vary greatly
[x] Figure out why log file doesn't get output when running outside the 
	debugger...
	[x] remove LITERALLY all OutputDebugString calls for real this time??...
[x] detect when the program crashes 
	https://stackoverflow.com/q/19656946
	https://stackoverflow.com/q/28629351
	[x] write log file
	[x] write minidump file
[x] detect & properly handle stack overflows
	[x] reserve extra stack space for this case
		https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadstackguarantee?redirectedfrom=MSDN
[x] Obtain AppData folder specific to this application
[x] Obtain TempData folder specific to this application
[x] Write dump files to a global unified temp directory
[x] Write log files to temp directory instead of the application's exe directory
[x] Write game_temp dll file to temp directory instead of the application's exe 
	directory
[x] separate game code out of kml, and setup a different repo for a test game
[x] For the love of god remove assertions from logging code to prevent infinite 
	exceptions from firing...  Either that or make a better assert macro.
[ ] Copy the necessary .pdb files along side the mini dumps (if available) to
	minimize the chance of accidentally recompiling the pdbs!
	[ ] copy win32-main.pdb
	[ ] copy the latest version of game*.pdb
[ ] Integrate IMGUI into the platform layer.
	[x] Hook IMGUI into the general-purpose allocator for transient storage.
		See IMGUI_DISABLE_DEFAULT_ALLOCATORS in `imconfig.h`
	[ ] Figure out why ImGui isn't getting keyboard events :| :| :|
	[ ] Figure out why ImGui demo widget randomly crashes.  It seemed to crash
		when I had all the demo widgets open and then opened the console 
		example.
		[ ] Is it my allocator that's broken????
			[ ] track the total # of allocations in the KGeneralAllocator
				[ ] verify double linked-list integrity in SLOW_BUILD mode
			[ ] track the size of the largest unallocated chunk, if it exists...
			[ ] WRITE UNIT TESTSSSSSSSSSS :(
			What other things can I verify??...
		[ ] Does it only crash when called from game, or does win32-exe 
			experience the same crash?
[ ] Don't rebuild platform layer if none of the files have changed.
[ ] display debug frame metrics
[ ] multi-threaded job queue
	[ ] make log system thread-safe probably!
	https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread
	https://docs.microsoft.com/en-us/cpp/standard-library/atomic-functions?view=vs-2019#atomic_thread_fence
	https://docs.microsoft.com/en-us/windows/win32/api/winnt/nf-winnt-interlockedcompareexchange
	https://docs.microsoft.com/en-us/windows/win32/sync/semaphore-objects
	https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-releasesemaphore?redirectedfrom=MSDN
	https://docs.microsoft.com/en-us/windows/win32/sync/wait-functions
[ ] Asset streaming using multi-threaded job queue
[ ] audio mixer
	[ ] Investigate `Failed to lock buffer! result=0x80070057` warning! :(
[ ] collision engine
[ ] fix KBR not being correct when window resizes
[ ] fullscreen toggle support 
	https://devblogs.microsoft.com/oldnewthing/20100412-00/?p=14353
[ ] pause audio output when window goes out of focus probably.
[ ] Disable asserts when `g_hasReceivedException` has been flagged, or else the 
	log file will never get written if an assert fires during the exception 
	handler!
[ ] turn on floating point exceptions
	https://docs.microsoft.com/en-us/windows/win32/debug/floating-point-exceptions
[ ] replace all ascii API calls with ambiguous char-width macros, and all CHAR 
	buffers with TCHARs to allow more flexibility & unicode support!!!  
	It's 2020.  We have infinite RAM.  Not supporting unicode is UNACCEPTABLE.
[ ] Figure out if there is a good way to detect if an application was force-quit
	by the user, like in situations such as an infinite loop, or the application
	just generally taking too long to do something.
[ ] Automatically delete older minidumps once enough accumulate.
[ ] Give log files rolling file names like minidumps.
[ ] Automatically delete older log files once enough accumulate.