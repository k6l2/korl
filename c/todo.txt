[x] log macro
	- INFO|DEBUG|ERROR
	- if we're in the VS debugger, use outputdebugstring
	- otherwise, just send to standard output streams
[x] create a script to compile all vulkan shaders in a project 
	(shader directory)
[ ] dynamic memory allocation
	- use a macro to store the meta data of each allocation (file, line)
	- use allocation macro to align each specific allocation to its expected 
		alignment (using stdalign.h)
	- align allocations to pages
	- protect pages that are not allocated
	- if allocation fails, allocate another memory arena from the OS
	- if memory arena contains no allocations and is not the primary arena, 
		release the arena back to the OS
	- stack allocator
	- heap allocator
	- is there a simple/easy way to have a common allocator "interface" which 
		essentially just a v-table dispatch?
[ ] memory metrics
	- how much memory is allocated for the ENTIRE program?
	- how much the allocated memory are we using?
	- WHERE do all our allocations originate?
[ ] time metrics
	- add thread to time metrics
	- "start" a time probe recording period (frames)
	- "probe" arbitrary sections of code using labels & using thread ID
	- print all the probe results from the previous frame
	- how does Optick get samples of the entire call stack of the application?
	- how does Optick get information about whether or not other applications on 
		the system are using the CPU at specific points in time?
[ ] stability metrics
	- SEH interceptor
	- stack overflow
	- infinite loop (unresponsive program) detection
[x] create a window
[ ] create a dynamic application code module
[x] gfx: vulkan - initialize graphics context
[x] gfx: vulkan - draw empty color buffer to the window
[ ] multi-threading: create a job queue + worker threads
[ ] assets: load vulkan shaders
[x] gfx: vulkan - draw different geoprims (tris, lines)
[ ] Sprite Fonts
	[x] dynamic memory: linear allocator
	[-] dynamic memory: stack allocator
		- push/pop
		- alloc
		- realloc
		- store meta data for each allocation right before the allocation memory pointer
			- bytes
			- file
			- line number
		- use OS virtual memory API directly to 
			- reserve a large range of addresses
			- commit only the necessary memory, then release when we're not using it anymore
	[x] assets: asset manager
		- we need this for loading graphics assets like shaders, textures, etc...
		- load assets from the current working directory
		- just use a stack allocator to store the asset data (always add memory, never remove free it)
	[x] assets: load PNG
	[x] gfx: vulkan - upload textures to GPU
	[x] gfx: vulkan - store & select from multiple uniform descriptor sets per frame
		- to support different VP matrices per frame
	[x] gfx: vulkan - draw textured geoprims
[ ] gfx: vulkan: orthographic projection - for drawing HUDs
[ ] gfx: vulkan: depth buffer
[ ] keyboard input
[ ] mouse input
[ ] game pad input (XInput)
[ ] create sample project
[ ] build all sample projects
[ ] time metrics: draw graph of all probed threads
[ ] memory metrics: draw graph of all application memory usage
[ ] audio: stream output using WASAPI
[ ] assets: load WAV files
[ ] audio: mixer, play WAV assets
[ ] assets: load OggVorbis files
[ ] audio: play/loop OggVorbis assets
[ ] assets: load GLTF
[ ] gfx: vulkan - draw mesh
[ ] gfx: vulkan - animate mesh
[ ] collision detection (narrow-phase)
[ ] collision detection (manifold calculation)
[ ] collision resolution (???)
[ ] networking: UDP
[ ] networking: reliable packets
[ ] game pad input (RawInput)
	[ ] logitech pad (D mode)
	[ ] DS4
	[ ] DS3
